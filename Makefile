#############################################################################
# Makefile for building: mDownloader
# Generated by qmake (2.01a) (Qt 4.8.6) on: ?? 10? 2 00:46:42 2014
# Project:  mDownloader.pro
# Template: app
# Command: /usr/bin/qmake-qt4 -o Makefile mDownloader.pro
#############################################################################

####### Compiler, tools and options

CC            = gcc
CXX           = g++
DEFINES       = -DQT_NO_DEBUG -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED
CFLAGS        = -pipe -O2 -Wall -W -D_REENTRANT $(DEFINES)
CXXFLAGS      = -pipe -O2 -Wall -W -D_REENTRANT $(DEFINES)
INCPATH       = -I/usr/share/qt4/mkspecs/linux-g++ -I. -I/usr/include/qt4/QtCore -I/usr/include/qt4/QtGui -I/usr/include/qt4 -I. -I.
LINK          = g++
LFLAGS        = -Wl,-O1
LIBS          = $(SUBLIBS)  -L/usr/lib/i386-linux-gnu -lssl -lcrypto -lQtGui -lQtCore -lpthread 
AR            = ar cqs
RANLIB        = 
QMAKE         = /usr/bin/qmake-qt4
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
SED           = sed
COPY_FILE     = $(COPY)
COPY_DIR      = $(COPY) -r
STRIP         = strip
INSTALL_FILE  = install -m 644 -p
INSTALL_DIR   = $(COPY_DIR)
INSTALL_PROGRAM = install -m 755 -p
DEL_FILE      = rm -f
SYMLINK       = ln -f -s
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = ./

####### Files

SOURCES       = main.cpp \
		mainwindowdownloader.cpp \
		advio.cpp \
		block.cpp \
		debug.cpp \
		downloader.cpp \
		ftp.cpp \
		ftpparser.cpp \
		ftpplugin.cpp \
		header.cpp \
		http.cpp \
		httpplugin.cpp \
		plugin.cpp \
		progressbar.cpp \
		proxy.cpp \
		task.cpp \
		tcp.cpp \
		url.cpp \
		utils.cpp \
		newtask.cpp \
		errormessagebox.cpp moc_mainwindowdownloader.cpp \
		moc_downloader.cpp \
		moc_newtask.cpp \
		moc_errormessagebox.cpp \
		qrc_mDownloader.cpp
OBJECTS       = main.o \
		mainwindowdownloader.o \
		advio.o \
		block.o \
		debug.o \
		downloader.o \
		ftp.o \
		ftpparser.o \
		ftpplugin.o \
		header.o \
		http.o \
		httpplugin.o \
		plugin.o \
		progressbar.o \
		proxy.o \
		task.o \
		tcp.o \
		url.o \
		utils.o \
		newtask.o \
		errormessagebox.o \
		moc_mainwindowdownloader.o \
		moc_downloader.o \
		moc_newtask.o \
		moc_errormessagebox.o \
		qrc_mDownloader.o
DIST          = /usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/common/gcc-base.conf \
		/usr/share/qt4/mkspecs/common/gcc-base-unix.conf \
		/usr/share/qt4/mkspecs/common/g++-base.conf \
		/usr/share/qt4/mkspecs/common/g++-unix.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/release.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/shared.prf \
		/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		mDownloader.pro
QMAKE_TARGET  = mDownloader
DESTDIR       = 
TARGET        = mDownloader

first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o "$@" "$<"

####### Build rules

all: Makefile $(TARGET)

$(TARGET): ui_mainwindowdownloader.h ui_newtask.h $(OBJECTS)  
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)

Makefile: mDownloader.pro  /usr/share/qt4/mkspecs/linux-g++/qmake.conf /usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/common/gcc-base.conf \
		/usr/share/qt4/mkspecs/common/gcc-base-unix.conf \
		/usr/share/qt4/mkspecs/common/g++-base.conf \
		/usr/share/qt4/mkspecs/common/g++-unix.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/release.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/shared.prf \
		/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		/usr/lib/i386-linux-gnu/libQtGui.prl \
		/usr/lib/i386-linux-gnu/libQtCore.prl
	$(QMAKE) -o Makefile mDownloader.pro
/usr/share/qt4/mkspecs/common/unix.conf:
/usr/share/qt4/mkspecs/common/linux.conf:
/usr/share/qt4/mkspecs/common/gcc-base.conf:
/usr/share/qt4/mkspecs/common/gcc-base-unix.conf:
/usr/share/qt4/mkspecs/common/g++-base.conf:
/usr/share/qt4/mkspecs/common/g++-unix.conf:
/usr/share/qt4/mkspecs/qconfig.pri:
/usr/share/qt4/mkspecs/features/qt_functions.prf:
/usr/share/qt4/mkspecs/features/qt_config.prf:
/usr/share/qt4/mkspecs/features/exclusive_builds.prf:
/usr/share/qt4/mkspecs/features/default_pre.prf:
/usr/share/qt4/mkspecs/features/release.prf:
/usr/share/qt4/mkspecs/features/default_post.prf:
/usr/share/qt4/mkspecs/features/shared.prf:
/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf:
/usr/share/qt4/mkspecs/features/warn_on.prf:
/usr/share/qt4/mkspecs/features/qt.prf:
/usr/share/qt4/mkspecs/features/unix/thread.prf:
/usr/share/qt4/mkspecs/features/moc.prf:
/usr/share/qt4/mkspecs/features/resources.prf:
/usr/share/qt4/mkspecs/features/uic.prf:
/usr/share/qt4/mkspecs/features/yacc.prf:
/usr/share/qt4/mkspecs/features/lex.prf:
/usr/share/qt4/mkspecs/features/include_source_dir.prf:
/usr/lib/i386-linux-gnu/libQtGui.prl:
/usr/lib/i386-linux-gnu/libQtCore.prl:
qmake:  FORCE
	@$(QMAKE) -o Makefile mDownloader.pro

dist: 
	@$(CHK_DIR_EXISTS) .tmp/mDownloader1.0.0 || $(MKDIR) .tmp/mDownloader1.0.0 
	$(COPY_FILE) --parents $(SOURCES) $(DIST) .tmp/mDownloader1.0.0/ && $(COPY_FILE) --parents mainwindowdownloader.h advio.h block.h debug.h downloader.h ftp.h ftpparser.h ftpplugin.h header.h http.h httpplugin.h macro.h myget.h plugin.h progressbar.h proxy.h task.h tcp.h url.h utils.h newtask.h errormessagebox.h .tmp/mDownloader1.0.0/ && $(COPY_FILE) --parents mDownloader.qrc .tmp/mDownloader1.0.0/ && $(COPY_FILE) --parents main.cpp mainwindowdownloader.cpp advio.cpp block.cpp debug.cpp downloader.cpp ftp.cpp ftpparser.cpp ftpplugin.cpp header.cpp http.cpp httpplugin.cpp plugin.cpp progressbar.cpp proxy.cpp task.cpp tcp.cpp url.cpp utils.cpp newtask.cpp errormessagebox.cpp .tmp/mDownloader1.0.0/ && $(COPY_FILE) --parents mainwindowdownloader.ui newtask.ui .tmp/mDownloader1.0.0/ && (cd `dirname .tmp/mDownloader1.0.0` && $(TAR) mDownloader1.0.0.tar mDownloader1.0.0 && $(COMPRESS) mDownloader1.0.0.tar) && $(MOVE) `dirname .tmp/mDownloader1.0.0`/mDownloader1.0.0.tar.gz . && $(DEL_FILE) -r .tmp/mDownloader1.0.0


clean:compiler_clean 
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) 
	-$(DEL_FILE) Makefile


check: first

mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

compiler_moc_header_make_all: moc_mainwindowdownloader.cpp moc_downloader.cpp moc_newtask.cpp moc_errormessagebox.cpp
compiler_moc_header_clean:
	-$(DEL_FILE) moc_mainwindowdownloader.cpp moc_downloader.cpp moc_newtask.cpp moc_errormessagebox.cpp
moc_mainwindowdownloader.cpp: mainwindowdownloader.h
	/usr/lib/i386-linux-gnu/qt4/bin/moc $(DEFINES) $(INCPATH) mainwindowdownloader.h -o moc_mainwindowdownloader.cpp

moc_downloader.cpp: plugin.h \
		task.h \
		macro.h \
		url.h \
		proxy.h \
		block.h \
		advio.h \
		progressbar.h \
		downloader.h
	/usr/lib/i386-linux-gnu/qt4/bin/moc $(DEFINES) $(INCPATH) downloader.h -o moc_downloader.cpp

moc_newtask.cpp: newtask.h
	/usr/lib/i386-linux-gnu/qt4/bin/moc $(DEFINES) $(INCPATH) newtask.h -o moc_newtask.cpp

moc_errormessagebox.cpp: errormessagebox.h
	/usr/lib/i386-linux-gnu/qt4/bin/moc $(DEFINES) $(INCPATH) errormessagebox.h -o moc_errormessagebox.cpp

compiler_rcc_make_all: qrc_mDownloader.cpp
compiler_rcc_clean:
	-$(DEL_FILE) qrc_mDownloader.cpp
qrc_mDownloader.cpp: mDownloader.qrc \
		motocool.jpg
	/usr/lib/i386-linux-gnu/qt4/bin/rcc -name mDownloader mDownloader.qrc -o qrc_mDownloader.cpp

compiler_image_collection_make_all: qmake_image_collection.cpp
compiler_image_collection_clean:
	-$(DEL_FILE) qmake_image_collection.cpp
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all: ui_mainwindowdownloader.h ui_newtask.h
compiler_uic_clean:
	-$(DEL_FILE) ui_mainwindowdownloader.h ui_newtask.h
ui_mainwindowdownloader.h: mainwindowdownloader.ui
	/usr/lib/i386-linux-gnu/qt4/bin/uic mainwindowdownloader.ui -o ui_mainwindowdownloader.h

ui_newtask.h: newtask.ui
	/usr/lib/i386-linux-gnu/qt4/bin/uic newtask.ui -o ui_newtask.h

compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean: compiler_moc_header_clean compiler_rcc_clean compiler_uic_clean 

####### Compile

main.o: main.cpp mainwindowdownloader.h \
		newtask.h \
		myget.h \
		macro.h \
		utils.h \
		url.h \
		advio.h \
		tcp.h \
		ftp.h \
		http.h \
		header.h \
		plugin.h \
		task.h \
		proxy.h \
		block.h \
		ftpplugin.h \
		httpplugin.h \
		downloader.h \
		progressbar.h \
		debug.h \
		errormessagebox.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o main.o main.cpp

mainwindowdownloader.o: mainwindowdownloader.cpp mainwindowdownloader.h \
		ui_mainwindowdownloader.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o mainwindowdownloader.o mainwindowdownloader.cpp

advio.o: advio.cpp advio.h \
		macro.h \
		plugin.h \
		task.h \
		url.h \
		proxy.h \
		block.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o advio.o advio.cpp

block.o: block.cpp block.h \
		advio.h \
		macro.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o block.o block.cpp

debug.o: debug.cpp debug.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o debug.o debug.cpp

downloader.o: downloader.cpp downloader.h \
		plugin.h \
		task.h \
		macro.h \
		url.h \
		proxy.h \
		block.h \
		advio.h \
		progressbar.h \
		utils.h \
		ftpplugin.h \
		ftp.h \
		tcp.h \
		httpplugin.h \
		debug.h \
		header.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o downloader.o downloader.cpp

ftp.o: ftp.cpp ftp.h \
		tcp.h \
		advio.h \
		macro.h \
		utils.h \
		debug.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o ftp.o ftp.cpp

ftpparser.o: ftpparser.cpp ftpparser.h \
		utils.h \
		macro.h \
		header.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o ftpparser.o ftpparser.cpp

ftpplugin.o: ftpplugin.cpp ftpplugin.h \
		plugin.h \
		task.h \
		macro.h \
		url.h \
		proxy.h \
		block.h \
		advio.h \
		ftp.h \
		tcp.h \
		utils.h \
		ftpparser.h \
		debug.h \
		header.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o ftpplugin.o ftpplugin.cpp

header.o: header.cpp header.h \
		utils.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o header.o header.cpp

http.o: http.cpp http.h \
		advio.h \
		macro.h \
		tcp.h \
		header.h \
		utils.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o http.o http.cpp

httpplugin.o: httpplugin.cpp http.h \
		advio.h \
		macro.h \
		tcp.h \
		header.h \
		url.h \
		utils.h \
		httpplugin.h \
		plugin.h \
		task.h \
		proxy.h \
		block.h \
		debug.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o httpplugin.o httpplugin.cpp

plugin.o: plugin.cpp plugin.h \
		task.h \
		macro.h \
		url.h \
		proxy.h \
		block.h \
		advio.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o plugin.o plugin.cpp

progressbar.o: progressbar.cpp progressbar.h \
		utils.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o progressbar.o progressbar.cpp

proxy.o: proxy.cpp url.h \
		proxy.h \
		utils.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o proxy.o proxy.cpp

task.o: task.cpp task.h \
		macro.h \
		url.h \
		proxy.h \
		utils.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o task.o task.cpp

tcp.o: tcp.cpp tcp.h \
		advio.h \
		macro.h \
		debug.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o tcp.o tcp.cpp

url.o: url.cpp url.h \
		macro.h \
		utils.h \
		header.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o url.o url.cpp

utils.o: utils.cpp utils.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o utils.o utils.cpp

newtask.o: newtask.cpp newtask.h \
		ui_newtask.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o newtask.o newtask.cpp

errormessagebox.o: errormessagebox.cpp errormessagebox.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o errormessagebox.o errormessagebox.cpp

moc_mainwindowdownloader.o: moc_mainwindowdownloader.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_mainwindowdownloader.o moc_mainwindowdownloader.cpp

moc_downloader.o: moc_downloader.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_downloader.o moc_downloader.cpp

moc_newtask.o: moc_newtask.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_newtask.o moc_newtask.cpp

moc_errormessagebox.o: moc_errormessagebox.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_errormessagebox.o moc_errormessagebox.cpp

qrc_mDownloader.o: qrc_mDownloader.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o qrc_mDownloader.o qrc_mDownloader.cpp

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:

